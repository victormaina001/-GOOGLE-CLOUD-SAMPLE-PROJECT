                         LAB :Google Cloud Fundamentals: Getting Started with GKE



        Objectives

In this lab, you learn how to perform the following tasks:

Provision a Kubernetes cluster using Kubernetes Engine.

Deploy and manage Docker containers using kubectl.

TASK  1: Sign in to the Google Cloud Platform (GCP) Console

For each lab, you get a new GCP project and set of resources for a fixed time at no cost.

Make sure you signed into Qwiklabs using an incognito window.

Note the lab's access time (for example, img/time.png and make sure you can finish in that time block.

There is no pause feature. You can restart if needed, but you have to start at the beginning.

When ready, click img/start_lab.png.

Note your lab credentials. You will use them to sign in to Cloud Platform Console. img/open_google_console.png

Click Open Google Console.

Click Use another account and copy/paste credentials for this lab into the prompts.

If you use other credentials, you'll get errors or incur charges.

Accept the terms and skip the recovery resource page.
Do not click End Lab unless you are finished with the lab or want to restart it. This clears your work and removes the project.


TASK 2: Confirm that needed APIs are enabled
1. login into the cloud sdk using the command:        gcloud auth login 

                                    This will login you the current authorised service account

to check for enabled API's type the following command : gcloud services list
This will display the list of all currently enabled API's if both the Kubernetes Engine API and Container Registry API are not enabled  run the following commands to enable them:
    
                            gcloud services enable Kubernetes Engine 
                            
                             gcloud services enable  Container Registry 
TASK  3: Start a  Kubernetes Engine cluster
                To setup the Kubernetes Engine cluster run the following commands:
   
               (i) gcloud config set project [project-id]  replace the project-id tag  with your own project id.
               (ii) gcloud config set compute/zone compute-zone  replace the compute-zone tag  with your  own compute-zone.
               (iii) gcloud config set compute/region compute-region  replace thecompute-region tag  with your own compute-region.                           
               (iv)Update gcloud to the latest version:
                                                    gcloud components update.
(v) Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
                
                         gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2


(vi) After the cluster is created, check your installed version of Kubernetes using the kubectl version command:

                              kubectl version  or the gcloud container get-server-config --zone compute-zone  
replace the compute-zone tag  with your  own compute-zone.
(vii) View your running nodes using the command line:
                                  gcloud container clusters list 
              This will list all the current existing clusters for running containers.

Task 4: Run and deploy a container
        (i)run the following command to deploy an nginx image:

                   kubectl create deploy nginx --image=nginx:1.17.10

In Kubernetes, all containers run in pods. This use of the kubectl create command caused Kubernetes to create a deployment consisting of a single pod containing the nginx container. A Kubernetes deployment keeps a given number of pods up and running even in the event of failures among the nodes on which they run. In this command, you launched the default number of pods, which is 1.


      (ii)View the pod running the nginx container:

               kubectl get pods

      (iii)Expose the nginx container to the Internet:

                kubectl expose deployment nginx --port 80 --type LoadBalancer

Kubernetes created a service and an external load balancer with a public IP address attached to it. The IP address remains the same for the life of the service. Any network traffic to that public IP address is routed to pods behind the service: in this case, the nginx pod.

    (iv)View the new service:

          kubectl get services

  Use the displayed external IP address to test and contact the nginx container remotely.

Open a new web browser tab and paste your cluster's external IP address into the address bar. The default home page of the Nginx browser is displayed.

    (v) Scale up the number of pods running on your service:

                 kubectl scale deployment nginx --replicas 3

Scaling up a deployment is useful when you want to increase available resources for an application that is becoming more popular.

   (vi)Confirm that Kubernetes has updated the number of pods:

                 kubectl get pods

   (vii)Confirm that your external IP address has not changed:

             kubectl get services

Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.

    Congratulations!

In this lab, you configured a Kubernetes cluster in Kubernetes Engine. You populated the cluster with several pods containing an application, exposed the application, and scaled the application.

                                                      End your lab